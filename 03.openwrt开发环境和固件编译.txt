这里以斐讯phicomm k1(psg1208) A1版 为例:
http://www.phicomm.com/cn/index.php/Products/family_spec/cateid/9/id/1.html
硬件规格
    协议标准：
        IEEE 802.11n、IEEE 802.11g、IEEE 802.11b、IEEE 802.11ac  IEEE 802.3、IEEE 802.3u
    端口：
        1个10/100M自适应WAN口
        4个10/100M自适应LAN口
    按钮：
        1个Wi-Fi/Reset/WPS复用开关
    天线：
        4根5dBi高增益全向天线
    指示灯：
        Power,2.4G Wi-Fi,5G Wi-Fi,WPS,WAN,LAN（1-4）
    尺寸：
        200×140×30mm
无线参数
    无线速率：
        无线速率：最高1200Mbps
        2.4G：300Mbps
        5G：867Mbps
    工作频段：
        2.4GHz / 5GHz
    信道选择：
        2.4GHz 信道选择：1-13
        5GHz信道选择：5个信道
    基本功能：
        无线开关
        无线网络名称（SSID）广播开关
        多SSID
    无线安全：
        无线安全功能开关
        WEP、WPA-PSK、WPA2-PSK、WPA/WPA2-PSK
        WPS
        无线MAC地址过滤
软件功能
    WAN接入方式：
        PPPoE、动态IP、静态IP
    拨号方式：
        自动拨号、按需拨号、手动拨号
    安全设置：
        IP地址过滤、端口过滤、域名过滤、
        MAC地址过滤、远程WEB管理
    实用功能：
        支持DDNS、支持VPN穿透、带宽控制、
        系统日志、端口转发、虚拟服务器、
        DMZ主机
    特色功能：
        智能调节无线信号强度，免去辐射后顾之忧
        智能APP管理，路由器配置管理更简单
    其它功能：
        配置文件导入与导出、Web软件升级
        DHCP服务器、客户端列表、静态地址分配
其他
    包装配件：
        路由器 x 1
        电源适配器 x 1
        快速安装指南 x 1
    使用环境：
        工作温度：0℃ 到 40℃
    存储温度：
        -40℃到 70℃
    工作湿度：
        10% 到 90%RH 不凝结
    存储湿度：
        5% 到 90%RH 不凝结


官网并没有列出硬件相关信息:
华强芯城:http://www.hqchip.com/

网上查的cpu:
    CPU型号：
        MEDIATek MT7620A ver 2，eco 6
        MT7620A是一款SOC芯片，也就是常说的的“片上系统”，顾名思义，这款芯片集成了CPU、Baseband、Radio等功能
        https://www.mediatek.com/products/homeNetworking/mt7620n-a

    内存：
        64MB DDR2
        拆开后盖,找到内存芯片
        winbond(华邦)
        w 97 51 G6 KB-25
        64468U900ZX2
        507HUA  TWN 

        搜索:W9751G6KB-25
        http://www.hqchip.com/p/W9751G6KB-25.html

        封装/外壳   84-TFBGA
        存储器类型	 易失
        存储容量	512Mb(64MB)（32Mx16）
        电源电压	1.7V~1.9V
        存储器格式	DRAM

        详细资料:
            http://www.winbond.com/resource-files/da00-w9751g6kbg1.pdf




        怎么读?
        Winbond(华邦)存储芯片的编号和现代差不多，其编号规格为：
        W <12> <34> <56> <78>

        W代表Winbond；
        <12>代表显存类型，98为SDRAM，94为DDRRAM；
        <34>代表颗粒的容量（08=8Mbits，16=16Mbits，64=64Mbits，12=128Mbits，25=256Mbits）
        <56>代表颗粒的位宽（16=16bit，32=32bit，G6=16bitBGA封装，G2=32bitBGA封装 ）
        <78>代表颗粒的版本号和封装（7代表版本号，常见的版本号为B和H；8代表封装，H为TSOP封装，B为BGA封装，D为LQFP封装）


    FLASH：8MB

        winbond 
        25Q64fvs1g
        1524
    google:
        25q64fvsig datasheet
        https://www.winbond.com/resource-files/w25q64fv%20revs%2007182017.pdf
        https://www.winbond.com/resource-files/w25q64fv%20revq%2006142016.pdf
        查看ordering information
        w表示公司前缀winbond
        25q:spiflash  serial flash memory with 4KB sectors
        64f:64F=64M-bit=64/8 M byter=8MB
        v:2.7v-3.6v
        s(s):8pin
        i:-40度-85度
        g:green package





硬件要求:
https://openwrt.org/supported_devices

General requirements for OpenWrt support
    1.SoC / target supported by OpenWrt
    2.Sufficient Flash to accommodate OpenWrt firmware image
        4MB min (won't be able to install GUI (LuCI))
        8MB better (will fit GUI and some other applications)
    3.Sufficient RAM for stable operation
        32MB min, 
        64MB better



注意事项:
    1.不能使用root用户编译
    2.梯子全局代理
    3.编译的时候，最好不要选择太多的应用程序包，否则可能编译包过大，造成刷机失败变砖，软件可以等系统刷入后，在逐个安装

1.安装ubuntu系统
2.下载openwrt源码
    创建目录study
    切换到目录study
    clone源码:

        获取源码:
            https://openwrt.org/downloads
            -->
            Source code: Git repositories
                https://git.openwrt.org/
            或者
                https://github.com/openwrt/openwrt



        编译过程:
            https://openwrt.org/downloads -> Build your own firmware -> here

            Documentation:
                Install the build system on the host:
                    https://openwrt.org/docs/guide-developer/build-system/install-buildsystem
                    1.安装相关编译包,页面中查找Ubuntu 18.04 LTS(19.04安装如下包也可以正常编译)
                    sudo apt-get install subversion build-essential libncurses5-dev zlib1g-dev gawk git ccache gettext libssl-dev xsltproc zip
                    makdir study
                    cd study
                    2.git clone https://git.openwrt.org/openwrt/openwrt.git
                    cd openwrt(源码目录)
                    执行make menuconfig，测试相关的包是否安装完备
                    
                Use the build system to compile a firmware image
                    https://openwrt.org/docs/guide-developer/build-system/use-buildsystem
                    3.正式编译
                        1.更新和安装feeds(第三方的包/非官方的包)
                            源码目录/feeds目录(第三方的包)
                            源码目录/package目录(官方的包)
                            
                            
                            更新feeds
                            ./scripts/feeds update -a

                            使第三方的包在make menuconfig的时候可用，而不是真正的安装和编译第三方包
                            安装所有的包(包被安装在 源码目录/feeds目录)
                            ./scripts/feeds install -a
                            

                            这个时候你再执行make menuconfig,就会发现安装的第三方的包都显示了，例如:luci
                        2.镜像配置
                        make menuconfig

                        y设置<*>,包被编译并包含到固件中
                        m设置<M>,包被编译，但是不会包含到固件中
                        n设置< >,源码不会被处理(不会被编译)

                        首先选择target system(编译目标/主目标/厂商品牌)，enter进入
                            这里我们的芯片是 mediatec MT7620A,
                            所以选择mediatek ralink mips
                        然后选择 subtarget(子目标/选择芯片),enter进入
                            这里选择mt7620

                        然后在target profile的支持平台列表中查找对应的设备型号
                            这里选择default profile(第一编译需要选择这个)
                            虽然当前的设备是phicomm psg1208,但是如果选择这个,则只会编译如下两个文件
                                openwrt-ramips-mt7620-phicomm_psg1208-initramfs-kernel.bin
                                openwrt-ramips-mt7620-phicomm_psg1208-squashfs-sysupgrade.bin
                            而没有*-factory.bin文件，所以如果是从别的系统刷为openwrt的话,这里需要选择default profile
                            因为我们需要*.-factory.bin文件，从其他的系统刷为openwrt系统

                            当然如果你的设备已经是openwrt了,而且你的设备型号时phicomm psg1208，这里就可以选择phicomm psg1208,只会编译如上的2个文件，节省时间
                            
                            选型值的含义:
                                multiple devices:编译多设备(选择这个后，需要在主界面弹出的target devices中选择你的设备，如果不在target devices中选择，则一个bin也不编译)
                                default profile:编译支持大多数板子(编译市面上常见的一部分设备,不一定编译你的设备型号),很多的支持型号都会编译出来
                                某个具体的型号:只编译这个具体型号(只生成2个文件)，例如:
                                openwrt-ramips-mt7620-phicomm_psg1208-initramfs-kernel.bin
                                openwrt-ramips-mt7620-phicomm_psg1208-squashfs-sysupgrade.bin
                         
                        如果是第一次从别的系统安装为openwrt系统，则需要在target devices中选择你的设备型号
                            ？？？？？？？？？？并且勾选default profile


                        可选:
                            选择luCI,回车进去 
                            Collections ---> 再回车进去
                            再空格选择第一个<*> luci（new）,
                            然后在Exit一路后退到主菜单
                        右方向键，选择exit退出，保存

                        如果target system,subtarget,target profile都选择了特定型号，则只会编译这个特定的设备的板子固件
                            openwrt-ramips-mt7620-phicomm_psg1208-initramfs-kernel.bin
                            openwrt-ramips-mt7620-phicomm_psg1208-squashfs-sysupgrade.bin
                        如果target system,subtarget选择了特定型号,target profile选择为default profile，则会编译支持所有的板子





3.编译系统

    编译系统之前最好执行一下make clean，
    可以清除你上次编译后的文件和相关目录
    https://openwrt.org/docs/guide-developer/build-system/use-buildsystem
    make clean


    正式编译命令
    V表示verbose,啰嗦模式/冗长模式，会把日志过程打印出来
    make V=99

    

编译时间:
    第一次编译:70分钟
    第二次编译:13分钟



编译后的文件:
    文件命名规则
    openwrt-芯片架构(arm/rampis)-芯片名称-机器品牌设备型号-系统文件格式(initramfs/squashfs)-升级（sysupgrade)/出厂(factory)(第一次安装/升级使用).bin


    https://openwrt.org/docs/guide-developer/quickstart-build-images
    //非openwrt系统第一次刷openwrt系统
    //现在新版本openwrt代码编译后没有*-factory.bin,变成了*-kernel.bin
    The *-factory.bin images are for the first installation.
    //已有的openwrt系统上刷openwrt系统
    The *-sysupgrade.bin images are for the updating existing OpenWrt installations.

    openwrt的固件一般分两种类型：
        factory原厂固件:
            多了一些验证的东西，不带Luci界面，wifi默认不打开，用于在原厂固件的基础上进行升级。
            普通家用路由一般不是openwrt固件，如果要将家用路由升级为openwrt固件，就可以用factory刷到路由上。
        sysupgrade固件:
            sysupgrade是在openwrt路由基础上升级固件，无论你是原厂固件或者本身就是openwrt固件，要升级到openwrt，factory都适用，
            但是sysupgrade只能用在升级，TTL救砖的时候就不能用sysupgrade。sysupgrade不包含数据分区，factory带，factory预留原厂分区，sysupgrade只包含openwrt分区。
        


    例如:
    只包含内核的固件
    openwrt-ramips-mt7620-phicomm_psg1208-initramfs-kernel.bin
    用于升级的完整固件
    openwrt-ramips-mt7620-phicomm_psg1208-squashfs-sysupgrade.bin



如果编译后发现不存在×-factory.bin或者*-sysupgrade.bin文件，很可能时编译文件过大





编译中的误区:
    make -jN 
    提高多核心的cup利用率
    例如:make -j5
    (在一个4核心的cpu上进行编译)








feeds命令的使用：
    切换到源码目录/scripts,可以看到feeds脚本文件
    执行:./feeds得到如下信息
    Commands:
	list [options]: List feeds, their content and revisions (if installed)
	Options:
	    -n :            List of feed names.
	    -s :            List of feed names and their URL.
	    -r <feedname>:  List packages of specified feed.
	    -d <delimiter>: Use specified delimiter to distinguish rows (default: spaces)
	    -f :            List feeds in feeds.conf compatible format (when using -s).

	install [options] <package>: Install a package
	Options:
	    -a :           Install all packages from all feeds or from the specified feed using the -p option.
	    -p <feedname>: Prefer this feed when installing packages.
	    -d <y|m|n>:    Set default for newly installed packages.
	    -f :           Install will be forced even if the package exists in core OpenWrt (override)

	search [options] <substring>: Search for a package
	Options:
	    -r <feedname>: Only search in this feed

	uninstall -a|<package>: Uninstall a package
	Options:
	    -a :           Uninstalls all packages.

	update -a|<feedname(s)>: Update packages and lists of feeds in feeds.conf .
	Options:
	    -a :           Update all feeds listed within feeds.conf. Otherwise the specified feeds will be updated.
	    -i :           Recreate the index only. No feed update from repository is performed.
	    -f :           Force updating feeds even if there are changed, uncommitted files.

	clean:             Remove downloaded/generated files.
